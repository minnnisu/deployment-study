name: Java CI with Gradle

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Grant Execute Permission For Gradlew
        run: |
          cd backend/deployment-study
          chmod +x gradlew

      - name: Build With Gradle
        run: |
          cd backend/deployment-study
          ./gradlew build -x test

      - name: Docker build & push to docker repo
        run: |
          cd backend/deployment-study
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t ${{ secrets.DOCKER_REPO }}/deployment-study-spring-boot-app .
          docker push ${{ secrets.DOCKER_REPO }}/deployment-study-spring-boot-app

  deploy:
    needs: build # build job이 성공해야만 deploy가 진행된다.
    runs-on: ubuntu-latest
    steps:
      - name: Set Green and Blue
        run: |
          CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.NGINX_IP }}/env")
          echo $CURRENT_UPSTREAM
          echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM" >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = "blue" ]; then
            echo "STOPPED_IP=${{ secrets.GREEN_IP }}" >> $GITHUB_ENV
            echo "CURRENT_PORT=${{ secrets.BLUE_PORT }}" >> $GITHUB_ENV
            echo "STOPPED_PORT=${{ secrets.GREEN_PORT }}" >> $GITHUB_ENV
            echo "STOPPED_UPSTREAM=green" >> $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM = "green" ]; then
            echo "STOPPED_IP=${{ secrets.BLUE_IP }}" >> $GITHUB_ENV
            echo "CURRENT_PORT=${{ secrets.GREEN_PORT }}" >> $GITHUB_ENV
            echo "STOPPED_PORT=${{ secrets.BLUE_PORT }}" >> $GITHUB_ENV
            echo "STOPPED_UPSTREAM=blue" >> $GITHUB_ENV
          else
            echo "error"
            exit 1
          fi

      - name: Execute Stopped Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SHH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            running=$(docker inspect --format='{{.State.Running}}' ${{ env.STOPPED_UPSTREAM }}-deployment-study 2>/dev/null || echo "false")
            if [[ "$running" == "true" ]]; then
              echo "컨테이너 중지 및 제거 중..."
              cd ~/deployment-study/${{env.STOPPED_UPSTREAM}}
              docker-compose down
            else
              echo "실행중인 컨테이너가 없음"
            fi
            docker pull ${{ secrets.DOCKER_REPO }}/deployment-study-spring-boot-app
            cd ~/deployment-study/${{env.STOPPED_UPSTREAM}}
            docker-compose up -d

      - name: Check the deployed service URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ env.STOPPED_IP }}:${{ env.STOPPED_PORT }}/env
          # 총 5번 하는데, 15초의 간격을 두고함. 이때까지 응답이 정상이 아니라면 배포 실패
          max-attempts: 5
          retry-delay: 15s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SHH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script_stop: true
          # 여기서 -i가 아닌 -it로 진행하면 오류가 발생하고, -c가 없으면 도커가 아닌 호스트에서 경로를 찾는다. 주의
          script: |
            docker exec -i nginx-deployment-study bash -c 'echo "set \$service_env ${{ env.STOPPED_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && service nginx reload'

      - name: Terminate Current Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SHH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            running=$(docker inspect --format='{{.State.Running}}' ${{ env.CURRENT_UPSTREAM }}-deployment-study 2>/dev/null || echo "false")
            if [[ "$running" == "true" ]]; then
              echo "${{ env.CURRENT_UPSTREAM }} 컨테이너 중지 및 제거 중..."
              cd ~/deployment-study/${{env.CURRENT_UPSTREAM}}
              docker-compose down
            else
              echo "실행중인 컨테이너가 없음"
            fi
